Starting Klippy...
Args: ['/home/quadra/klipper/klippy/klippy.py', '/home/quadra/printer_data/config/printer.cfg', '-I', '/home/quadra/printer_data/comms/klippy.serial', '-l', '/home/quadra/printer_data/logs/klippy.log', '-a', '/home/quadra/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-299-gb1f597c5'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Building C code module c_helper.so
Start printer at Mon Oct 16 22:17:17 2023 (1697519837.9 6632.7)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472866597520: New connection
webhooks client 281472866597520: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281472866597520: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:18:05 2023 (1697519885.8 6680.6)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472859275568: New connection
webhooks client 281472859275568: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Starting Klippy...
Args: ['/home/quadra/klipper/klippy/klippy.py', '/home/quadra/printer_data/config/printer.cfg', '-I', '/home/quadra/printer_data/comms/klippy.serial', '-l', '/home/quadra/printer_data/logs/klippy.log', '-a', '/home/quadra/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-299-gb1f597c5'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Oct 16 22:19:37 2023 (1697519977.1 19.9)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473230391280: New connection
webhooks client 281473230391280: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230391280: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:20:15 2023 (1697520015.3 42.8)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473230856640: New connection
webhooks client 281473230856640: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230856640: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:20:44 2023 (1697520044.1 71.6)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473299231984: New connection
webhooks client 281473299231984: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281473299231984: Disconnected
webhooks client 281473230995568: New connection
webhooks client 281473230995568: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230995568: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:23:08 2023 (1697520188.9 216.4)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473300625248: New connection
webhooks client 281473300625248: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473300625248: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:24:53 2023 (1697520293.2 320.7)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473231749376: New connection
webhooks client 281473231749376: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473231749376: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:25:27 2023 (1697520327.3 354.8)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 304, in check_unused_options
    raise error("Option '%s' is not valid in section '%s'"
configparser.Error: Option 'command' is not valid in section 'gcode_macro update_git'
webhooks client 281473231520000: New connection
webhooks client 281473231520000: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473231520000: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:25:54 2023 (1697520354.5 381.9)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 304, in check_unused_options
    raise error("Option '%s' is not valid in section '%s'"
configparser.Error: Option 'command' is not valid in section 'gcode_macro beep'
webhooks client 281473299204272: New connection
webhooks client 281473299204272: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281473299204272: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:26:08 2023 (1697520368.1 395.6)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 304, in check_unused_options
    raise error("Option '%s' is not valid in section '%s'"
configparser.Error: Option 'command' is not valid in section 'gcode_macro beep'
webhooks client 281473300148432: New connection
webhooks client 281473300148432: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473300148432: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:30:14 2023 (1697520614.0 641.5)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473230859664: New connection
webhooks client 281473230859664: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230859664: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:30:39 2023 (1697520640.0 667.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473230393200: New connection
webhooks client 281473230393200: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230393200: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:30:59 2023 (1697520659.7 687.2)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473300655984: New connection
webhooks client 281473300655984: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473300655984: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:31:53 2023 (1697520713.2 740.7)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473230948096: New connection
webhooks client 281473230948096: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281473230948096: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:34:20 2023 (1697520860.5 888.0)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473230693040: New connection
webhooks client 281473230693040: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230693040: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:34:51 2023 (1697520891.4 918.9)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473230857072: New connection
webhooks client 281473230857072: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230857072: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:35:35 2023 (1697520935.1 962.6)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command hello_world' is not a valid config section
webhooks client 281473231681328: New connection
webhooks client 281473231681328: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473231681328: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:35:49 2023 (1697520949.8 977.2)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473230086976: New connection
webhooks client 281473230086976: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473230086976: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:36:04 2023 (1697520964.7 992.2)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473300635360: New connection
webhooks client 281473300635360: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281473300635360: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:38:58 2023 (1697521138.7 1166.1)
===== Config file =====
[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[force_move]
enable_force_move = true

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 281473231224640: New connection
webhooks client 281473231224640: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
mcu 'mcu': got {'oid': 15, 'next_clock': 4250856576, 'value': 31426, '#name': 'analog_in_state', '#sent_time': 1168.752345265, '#receive_time': 1168.7925357230001}
mcu 'mcu': got {'oid': 21, 'next_clock': 4255176576, 'value': 31368, '#name': 'analog_in_state', '#sent_time': 1168.807100598, '#receive_time': 1168.852545181}
Loaded MCU 'mcu' 105 commands (v0.11.0-148-g52f4e20c / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
MCU error during connect
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 180, in _connect
    cb()
  File "/home/quadra/klipper/klippy/mcu.py", line 762, in _connect
    raise error("Failed automated reset of MCU '%s'"
mcu.error: Failed automated reset of MCU 'mcu'
No build file /home/quadra/klipper/klippy/../.config
No build file /home/quadra/klipper/klippy/../out/klipper.dict
No build file /home/quadra/klipper/klippy/../out/klipper.elf
mcu 'mcu': got {'oid': 15, 'next_clock': 4272456576, 'value': 31419, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.092599265}
mcu 'mcu': got {'oid': 21, 'next_clock': 4276776576, 'value': 31370, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.152559348}
mcu 'mcu': got {'oid': 15, 'next_clock': 4294056576, 'value': 31422, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.392584807}
mcu 'mcu': got {'oid': 21, 'next_clock': 3409280, 'value': 31375, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.451570223}
mcu 'mcu': got {'oid': 15, 'next_clock': 20689280, 'value': 31424, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.69158464}
mcu 'mcu': got {'oid': 21, 'next_clock': 25009280, 'value': 31361, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.75156064}
mcu 'mcu': got {'oid': 15, 'next_clock': 42289280, 'value': 31421, '#name': 'analog_in_state', '#sent_time': 1169.0296047230001, '#receive_time': 1169.99157864}
mcu 'mcu': got {'oid': 21, 'next_clock': 46609280, 'value': 31363, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.052522474}
mcu 'mcu': got {'oid': 15, 'next_clock': 63889280, 'value': 31411, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.29163064}
mcu 'mcu': got {'oid': 21, 'next_clock': 68209280, 'value': 31372, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.351609974}
mcu 'mcu': got {'oid': 15, 'next_clock': 85489280, 'value': 31424, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.591649099}
mcu 'mcu': got {'oid': 21, 'next_clock': 89809280, 'value': 31370, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.651604432}
mcu 'mcu': got {'oid': 15, 'next_clock': 107089280, 'value': 31424, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.891601516}
mcu 'mcu': got {'oid': 21, 'next_clock': 111409280, 'value': 31371, '#name': 'analog_in_state', '#sent_time': 1170.0144101820001, '#receive_time': 1170.951630266}
mcu 'mcu': got {'oid': 15, 'next_clock': 128689280, 'value': 31418, '#name': 'analog_in_state', '#sent_time': 1170.999423724, '#receive_time': 1171.191592891}
mcu 'mcu': got {'oid': 21, 'next_clock': 133009280, 'value': 31370, '#name': 'analog_in_state', '#sent_time': 1170.999423724, '#receive_time': 1171.251611807}
mcu 'mcu': got {'oid': 15, 'next_clock': 150289280, 'value': 31420, '#name': 'analog_in_state', '#sent_time': 1170.999423724, '#receive_time': 1171.491608599}
mcu 'mcu': got {'oid': 21, 'next_clock': 154609280, 'value': 31369, '#name': 'analog_in_state', '#sent_time': 1170.999423724, '#receive_time': 1171.5516586410001}
mcu 'mcu': got {'oid': 15, 'next_clock': 171889280, 'value': 31425, '#name': 'analog_in_state', '#sent_time': 1170.999423724, '#receive_time': 1171.7915854330001}
mcu 'mcu': got {'oid': 21, 'next_clock': 176209280, 'value': 31365, '#name': 'analog_in_state', '#sent_time': 1170.999423724, '#receive_time': 1171.851591099}
mcu 'mcu': got {'oid': 15, 'next_clock': 193489280, 'value': 31421, '#name': 'analog_in_state', '#sent_time': 1171.984384891, '#receive_time': 1172.091689516}
mcu 'mcu': got {'oid': 21, 'next_clock': 197809280, 'value': 31366, '#name': 'analog_in_state', '#sent_time': 1171.984384891, '#receive_time': 1172.151621141}
mcu 'mcu': got {'oid': 15, 'next_clock': 215089280, 'value': 31423, '#name': 'analog_in_state', '#sent_time': 1171.984384891, '#receive_time': 1172.391583975}
mcu 'mcu': got {'oid': 21, 'next_clock': 219409280, 'value': 31366, '#name': 'analog_in_state', '#sent_time': 1171.984384891, '#receive_time': 1172.4515816829999}
mcu 'mcu': got {'oid': 15, 'next_clock': 236689280, 'value': 31421, '#name': 'analog_in_state', '#sent_time': 1171.984384891, '#receive_time': 1172.6916099329999}
mcu 'mcu': got {'oid': 21, 'next_clock': 241009280, 'value': 31363, '#name': 'analog_in_state', '#sent_time': 1171.984384891, '#receive_time': 1172.751598225}
mcu 'mcu': got {'oid': 15, 'next_clock': 258289280, 'value': 31421, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1172.991524267}
mcu 'mcu': got {'oid': 21, 'next_clock': 262609280, 'value': 31367, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.0515621}
mcu 'mcu': got {'oid': 15, 'next_clock': 279889280, 'value': 31418, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.291589558}
mcu 'mcu': got {'oid': 21, 'next_clock': 284209280, 'value': 31362, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.351622183}
mcu 'mcu': got {'oid': 15, 'next_clock': 301489280, 'value': 31424, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.5915914749999}
mcu 'mcu': got {'oid': 21, 'next_clock': 305809280, 'value': 31368, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.651579267}
mcu 'mcu': got {'oid': 15, 'next_clock': 323089280, 'value': 31415, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.8915572249998}
mcu 'mcu': got {'oid': 21, 'next_clock': 327409280, 'value': 31365, '#name': 'analog_in_state', '#sent_time': 1172.969337808, '#receive_time': 1173.951539475}
mcu 'mcu': got {'oid': 15, 'next_clock': 344689280, 'value': 31415, '#name': 'analog_in_state', '#sent_time': 1173.953917559, '#receive_time': 1174.1915613919998}
mcu 'mcu': got {'oid': 21, 'next_clock': 349009280, 'value': 31360, '#name': 'analog_in_state', '#sent_time': 1173.953917559, '#receive_time': 1174.2515891839998}
mcu 'mcu': got {'oid': 15, 'next_clock': 366289280, 'value': 31417, '#name': 'analog_in_state', '#sent_time': 1173.953917559, '#receive_time': 1174.491585476}
mcu 'mcu': got {'oid': 21, 'next_clock': 370609280, 'value': 31370, '#name': 'analog_in_state', '#sent_time': 1173.953917559, '#receive_time': 1174.551617059}
mcu 'mcu': got {'oid': 15, 'next_clock': 387889280, 'value': 31416, '#name': 'analog_in_state', '#sent_time': 1173.953917559, '#receive_time': 1174.7915791419998}
mcu 'mcu': got {'oid': 21, 'next_clock': 392209280, 'value': 31367, '#name': 'analog_in_state', '#sent_time': 1173.953917559, '#receive_time': 1174.8515545589999}
Attempting MCU 'mcu' reset command
webhooks client 281473231224640: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:39:08 2023 (1697521148.7 1176.2)
===== Config file =====
[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[force_move]
enable_force_move = true

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 281473306965760: New connection
webhooks client 281473306965760: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Loaded MCU 'mcu' 105 commands (v0.11.0-148-g52f4e20c / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Enabling TMC virtual enable for 'stepper_x'
Enabling TMC virtual enable for 'stepper_y'
Enabling TMC virtual enable for 'stepper_z'
Enabling TMC virtual enable for 'extruder'
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (5.0, 25.0)     | (35.0, 5.0)
  1   | (47.5, 25.0)    | (77.5, 5.0)
  2   | (90.0, 25.0)    | (120.0, 5.0)
  3   | (132.5, 25.0)   | (162.5, 5.0)
  4   | (175.0, 25.0)   | (205.0, 5.0)
  5   | (175.0, 72.5)   | (205.0, 52.5)
  6   | (132.5, 72.5)   | (162.5, 52.5)
  7   | (90.0, 72.5)    | (120.0, 52.5)
  8   | (47.5, 72.5)    | (77.5, 52.5)
  9   | (5.0, 72.5)     | (35.0, 52.5)
  10  | (5.0, 120.0)    | (35.0, 100.0)
  11  | (47.5, 120.0)   | (77.5, 100.0)
  12  | (90.0, 120.0)   | (120.0, 100.0)
  13  | (132.5, 120.0)  | (162.5, 100.0)
  14  | (175.0, 120.0)  | (205.0, 100.0)
  15  | (175.0, 167.5)  | (205.0, 147.5)
  16  | (132.5, 167.5)  | (162.5, 147.5)
  17  | (90.0, 167.5)   | (120.0, 147.5)
  18  | (47.5, 167.5)   | (77.5, 147.5)
  19  | (5.0, 167.5)    | (35.0, 147.5)
  20  | (5.0, 215.0)    | (35.0, 195.0)
  21  | (47.5, 215.0)   | (77.5, 195.0)
  22  | (90.0, 215.0)   | (120.0, 195.0)
  23  | (132.5, 215.0)  | (162.5, 195.0)
  24  | (175.0, 215.0)  | (205.0, 195.0)
Starting heater checks for extruder
Stats 1179.7: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=2569 bytes_read=5405 bytes_retransmit=9 bytes_invalid=0 send_seq=196 receive_seq=193 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=1541 upcoming_bytes=728 freq=72002633 heater_bed: target=0 temp=0.0 pwm=0.000  sysload=0.00 cputime=47.202 memavail=1273320 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473306965760
webhooks: registering remote method 'reboot_machine' for connection id: 281473306965760
webhooks: registering remote method 'pause_job_queue' for connection id: 281473306965760
webhooks: registering remote method 'start_job_queue' for connection id: 281473306965760
Stats 1180.7: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=5092 bytes_read=5726 bytes_retransmit=9 bytes_invalid=0 send_seq=245 receive_seq=244 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=18 upcoming_bytes=0 freq=72004525 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.00 cputime=47.260 memavail=1273096 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1181.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5121 bytes_read=5874 bytes_retransmit=9 bytes_invalid=0 send_seq=247 receive_seq=247 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72004930 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.00 cputime=47.329 memavail=1272872 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.8 pwm=0.000
Stats 1182.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5127 bytes_read=5980 bytes_retransmit=9 bytes_invalid=0 send_seq=248 receive_seq=248 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005755 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.00 cputime=47.369 memavail=1272872 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1183.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5133 bytes_read=6101 bytes_retransmit=9 bytes_invalid=0 send_seq=249 receive_seq=249 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005615 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.00 cputime=47.415 memavail=1273628 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1184.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5139 bytes_read=6222 bytes_retransmit=9 bytes_invalid=0 send_seq=250 receive_seq=250 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005487 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.00 cputime=47.454 memavail=1273640 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1185.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5145 bytes_read=6328 bytes_retransmit=9 bytes_invalid=0 send_seq=251 receive_seq=251 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005410 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.00 cputime=47.496 memavail=1273388 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1186.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5151 bytes_read=6462 bytes_retransmit=9 bytes_invalid=0 send_seq=252 receive_seq=252 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005370 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.08 cputime=47.535 memavail=1273388 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1187.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5157 bytes_read=6583 bytes_retransmit=9 bytes_invalid=0 send_seq=253 receive_seq=253 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005413 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.08 cputime=47.578 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1188.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5163 bytes_read=6689 bytes_retransmit=9 bytes_invalid=0 send_seq=254 receive_seq=254 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005423 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.08 cputime=47.617 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1189.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5169 bytes_read=6810 bytes_retransmit=9 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005437 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.08 cputime=47.659 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1190.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5175 bytes_read=6931 bytes_retransmit=9 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005385 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.08 cputime=47.677 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1191.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5181 bytes_read=7050 bytes_retransmit=9 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005345 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.08 cputime=47.697 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1192.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5187 bytes_read=7171 bytes_retransmit=9 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005366 heater_bed: target=0 temp=23.0 pwm=0.000  sysload=0.08 cputime=47.741 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1193.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5193 bytes_read=7292 bytes_retransmit=9 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005379 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.08 cputime=47.785 memavail=1273140 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1194.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5199 bytes_read=7398 bytes_retransmit=9 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005353 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.08 cputime=47.804 memavail=1273144 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1195.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5205 bytes_read=7519 bytes_retransmit=9 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005340 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.08 cputime=47.823 memavail=1273144 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1196.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5211 bytes_read=7653 bytes_retransmit=9 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005344 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.07 cputime=47.867 memavail=1273144 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1197.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5217 bytes_read=7759 bytes_retransmit=9 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005358 heater_bed: target=0 temp=23.0 pwm=0.000  sysload=0.07 cputime=47.910 memavail=1272428 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1198.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5223 bytes_read=7880 bytes_retransmit=9 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005337 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.07 cputime=47.930 memavail=1272684 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1199.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5229 bytes_read=8001 bytes_retransmit=9 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005328 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.07 cputime=47.949 memavail=1272684 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.8 pwm=0.000
Stats 1200.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5235 bytes_read=8107 bytes_retransmit=9 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005337 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.07 cputime=47.991 memavail=1272684 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 1201.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5241 bytes_read=8241 bytes_retransmit=9 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005351 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.06 cputime=48.035 memavail=1272684 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1202.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5247 bytes_read=8362 bytes_retransmit=9 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005375 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.06 cputime=48.061 memavail=1272676 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1203.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5259 bytes_read=8484 bytes_retransmit=9 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005357 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.06 cputime=48.080 memavail=1272424 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 1204.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5265 bytes_read=8605 bytes_retransmit=9 bytes_invalid=0 send_seq=271 receive_seq=271 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005355 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.06 cputime=48.118 memavail=1272424 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1205.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5271 bytes_read=8726 bytes_retransmit=9 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005363 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.06 cputime=48.162 memavail=1272424 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1206.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5277 bytes_read=8845 bytes_retransmit=9 bytes_invalid=0 send_seq=273 receive_seq=273 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005358 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.06 cputime=48.187 memavail=1272424 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1207.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5283 bytes_read=8966 bytes_retransmit=9 bytes_invalid=0 send_seq=274 receive_seq=274 retransmit_seq=2 srtt=0.003 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005365 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.06 cputime=48.206 memavail=1272172 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1208.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5289 bytes_read=9087 bytes_retransmit=9 bytes_invalid=0 send_seq=275 receive_seq=275 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005367 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.06 cputime=48.242 memavail=1272176 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1209.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5295 bytes_read=9193 bytes_retransmit=9 bytes_invalid=0 send_seq=276 receive_seq=276 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005371 heater_bed: target=0 temp=23.0 pwm=0.000  sysload=0.06 cputime=48.286 memavail=1271924 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1210.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5301 bytes_read=9314 bytes_retransmit=9 bytes_invalid=0 send_seq=277 receive_seq=277 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005364 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.06 cputime=48.312 memavail=1271928 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1211.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5307 bytes_read=9435 bytes_retransmit=9 bytes_invalid=0 send_seq=278 receive_seq=278 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005370 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.05 cputime=48.331 memavail=1272200 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1212.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5313 bytes_read=9554 bytes_retransmit=9 bytes_invalid=0 send_seq=279 receive_seq=279 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005369 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.05 cputime=48.368 memavail=1272200 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.8 pwm=0.000
Stats 1213.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5319 bytes_read=9675 bytes_retransmit=9 bytes_invalid=0 send_seq=280 receive_seq=280 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005373 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.05 cputime=48.413 memavail=1272196 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1214.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5325 bytes_read=9796 bytes_retransmit=9 bytes_invalid=0 send_seq=281 receive_seq=281 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005367 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.05 cputime=48.438 memavail=1272200 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 1215.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5331 bytes_read=9902 bytes_retransmit=9 bytes_invalid=0 send_seq=282 receive_seq=282 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005360 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.05 cputime=48.457 memavail=1272448 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1216.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5337 bytes_read=10023 bytes_retransmit=9 bytes_invalid=0 send_seq=283 receive_seq=283 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005361 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.05 cputime=48.493 memavail=1272452 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1217.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5343 bytes_read=10157 bytes_retransmit=9 bytes_invalid=0 send_seq=284 receive_seq=284 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005364 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.05 cputime=48.536 memavail=1272252 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1218.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5349 bytes_read=10263 bytes_retransmit=9 bytes_invalid=0 send_seq=285 receive_seq=285 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005366 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.05 cputime=48.575 memavail=1272268 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1219.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5355 bytes_read=10384 bytes_retransmit=9 bytes_invalid=0 send_seq=286 receive_seq=286 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005366 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.05 cputime=48.617 memavail=1272808 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1220.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5361 bytes_read=10505 bytes_retransmit=9 bytes_invalid=0 send_seq=287 receive_seq=287 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005368 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.05 cputime=48.657 memavail=1272812 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1221.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5367 bytes_read=10624 bytes_retransmit=9 bytes_invalid=0 send_seq=288 receive_seq=288 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005367 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.12 cputime=48.699 memavail=1272560 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1222.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5373 bytes_read=10745 bytes_retransmit=9 bytes_invalid=0 send_seq=289 receive_seq=289 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005366 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.12 cputime=48.738 memavail=1272560 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1223.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5379 bytes_read=10866 bytes_retransmit=9 bytes_invalid=0 send_seq=290 receive_seq=290 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005364 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.12 cputime=48.779 memavail=1265540 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1224.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5385 bytes_read=10972 bytes_retransmit=9 bytes_invalid=0 send_seq=291 receive_seq=291 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005364 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.12 cputime=48.817 memavail=1265548 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1225.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5391 bytes_read=11093 bytes_retransmit=9 bytes_invalid=0 send_seq=292 receive_seq=292 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005364 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.12 cputime=48.859 memavail=1265800 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1226.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5397 bytes_read=11214 bytes_retransmit=9 bytes_invalid=0 send_seq=293 receive_seq=293 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005363 heater_bed: target=0 temp=22.6 pwm=0.000  sysload=0.11 cputime=48.896 memavail=1273500 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1227.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5403 bytes_read=11333 bytes_retransmit=9 bytes_invalid=0 send_seq=294 receive_seq=294 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005362 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.11 cputime=48.939 memavail=1272632 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1228.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5409 bytes_read=11454 bytes_retransmit=9 bytes_invalid=0 send_seq=295 receive_seq=295 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005363 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.11 cputime=48.977 memavail=1266592 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1229.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5415 bytes_read=11575 bytes_retransmit=9 bytes_invalid=0 send_seq=296 receive_seq=296 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005360 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.11 cputime=49.016 memavail=1266592 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1230.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5421 bytes_read=11681 bytes_retransmit=9 bytes_invalid=0 send_seq=297 receive_seq=297 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005357 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.11 cputime=49.035 memavail=1266592 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1231.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5427 bytes_read=11802 bytes_retransmit=9 bytes_invalid=0 send_seq=298 receive_seq=298 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005355 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.11 cputime=49.057 memavail=1266100 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1232.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5433 bytes_read=11936 bytes_retransmit=9 bytes_invalid=0 send_seq=299 receive_seq=299 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005357 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.11 cputime=49.101 memavail=1266100 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1233.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5439 bytes_read=12042 bytes_retransmit=9 bytes_invalid=0 send_seq=300 receive_seq=300 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005358 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.11 cputime=49.141 memavail=1265848 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 1234.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5445 bytes_read=12162 bytes_retransmit=9 bytes_invalid=0 send_seq=301 receive_seq=301 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005359 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.11 cputime=49.177 memavail=1265848 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 1235.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5451 bytes_read=12274 bytes_retransmit=9 bytes_invalid=0 send_seq=302 receive_seq=302 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005360 heater_bed: target=0 temp=22.9 pwm=0.000  sysload=0.11 cputime=49.220 memavail=1269616 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 2129.6: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=10932 bytes_read=118072 bytes_retransmit=9 bytes_invalid=0 send_seq=1212 receive_seq=1212 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005343 heater_bed: target=0 temp=22.8 pwm=0.000  sysload=0.46 cputime=77.996 memavail=1261452 print_time=953.835 buffer_time=0.361 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Attempting MCU 'mcu' reset command
webhooks client 281473306965760: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:55:03 2023 (1697522103.7 2131.2)
===== Config file =====
[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[force_move]
enable_force_move = true

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 281473306586464: New connection
webhooks client 281473306586464: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Loaded MCU 'mcu' 105 commands (v0.11.0-148-g52f4e20c / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Enabling TMC virtual enable for 'stepper_x'
Enabling TMC virtual enable for 'stepper_y'
Enabling TMC virtual enable for 'stepper_z'
Enabling TMC virtual enable for 'extruder'
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (5.0, 25.0)     | (35.0, 5.0)
  1   | (47.5, 25.0)    | (77.5, 5.0)
  2   | (90.0, 25.0)    | (120.0, 5.0)
  3   | (132.5, 25.0)   | (162.5, 5.0)
  4   | (175.0, 25.0)   | (205.0, 5.0)
  5   | (175.0, 72.5)   | (205.0, 52.5)
  6   | (132.5, 72.5)   | (162.5, 52.5)
  7   | (90.0, 72.5)    | (120.0, 52.5)
  8   | (47.5, 72.5)    | (77.5, 52.5)
  9   | (5.0, 72.5)     | (35.0, 52.5)
  10  | (5.0, 120.0)    | (35.0, 100.0)
  11  | (47.5, 120.0)   | (77.5, 100.0)
  12  | (90.0, 120.0)   | (120.0, 100.0)
  13  | (132.5, 120.0)  | (162.5, 100.0)
  14  | (175.0, 120.0)  | (205.0, 100.0)
  15  | (175.0, 167.5)  | (205.0, 147.5)
  16  | (132.5, 167.5)  | (162.5, 147.5)
  17  | (90.0, 167.5)   | (120.0, 147.5)
  18  | (47.5, 167.5)   | (77.5, 147.5)
  19  | (5.0, 167.5)    | (35.0, 147.5)
  20  | (5.0, 215.0)    | (35.0, 195.0)
  21  | (47.5, 215.0)   | (77.5, 195.0)
  22  | (90.0, 215.0)   | (120.0, 195.0)
  23  | (132.5, 215.0)  | (162.5, 195.0)
  24  | (175.0, 215.0)  | (205.0, 195.0)
Starting heater checks for extruder
Stats 2134.6: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=2569 bytes_read=5404 bytes_retransmit=9 bytes_invalid=0 send_seq=196 receive_seq=193 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=1671 upcoming_bytes=598 freq=72003252 heater_bed: target=0 temp=0.0 pwm=0.000  sysload=0.51 cputime=80.076 memavail=1264788 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 281473306586464
webhooks: registering remote method 'reboot_machine' for connection id: 281473306586464
webhooks: registering remote method 'pause_job_queue' for connection id: 281473306586464
webhooks: registering remote method 'start_job_queue' for connection id: 281473306586464
Stats 2135.6: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=5092 bytes_read=5725 bytes_retransmit=9 bytes_invalid=0 send_seq=245 receive_seq=244 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=18 upcoming_bytes=0 freq=72004664 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.51 cputime=80.132 memavail=1264788 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 2136.6: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5121 bytes_read=5873 bytes_retransmit=9 bytes_invalid=0 send_seq=247 receive_seq=247 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005415 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.51 cputime=80.172 memavail=1264788 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 2137.6: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5127 bytes_read=5979 bytes_retransmit=9 bytes_invalid=0 send_seq=248 receive_seq=248 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005577 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.46 cputime=80.211 memavail=1264792 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2138.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5133 bytes_read=6100 bytes_retransmit=9 bytes_invalid=0 send_seq=249 receive_seq=249 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005685 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.46 cputime=80.254 memavail=1264792 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2139.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5139 bytes_read=6221 bytes_retransmit=9 bytes_invalid=0 send_seq=250 receive_seq=250 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005545 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.46 cputime=80.294 memavail=1265552 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 2140.7: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000153 mcu_task_stddev=0.000357 bytes_write=5145 bytes_read=6327 bytes_retransmit=9 bytes_invalid=0 send_seq=251 receive_seq=251 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005457 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.46 cputime=80.335 memavail=1265552 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2141.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5151 bytes_read=6461 bytes_retransmit=9 bytes_invalid=0 send_seq=252 receive_seq=252 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005440 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.46 cputime=80.377 memavail=1265328 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2142.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5157 bytes_read=6582 bytes_retransmit=9 bytes_invalid=0 send_seq=253 receive_seq=253 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005439 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.43 cputime=80.418 memavail=1265328 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2143.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5163 bytes_read=6688 bytes_retransmit=9 bytes_invalid=0 send_seq=254 receive_seq=254 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005412 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.43 cputime=80.456 memavail=1265348 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 2144.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5169 bytes_read=6809 bytes_retransmit=9 bytes_invalid=0 send_seq=255 receive_seq=255 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005423 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.43 cputime=80.499 memavail=1265348 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2145.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000009 mcu_task_stddev=0.000007 bytes_write=5175 bytes_read=6930 bytes_retransmit=9 bytes_invalid=0 send_seq=256 receive_seq=256 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005398 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.43 cputime=80.525 memavail=1265860 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2146.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5181 bytes_read=7049 bytes_retransmit=9 bytes_invalid=0 send_seq=257 receive_seq=257 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005363 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.43 cputime=80.543 memavail=1265860 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2147.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5187 bytes_read=7170 bytes_retransmit=9 bytes_invalid=0 send_seq=258 receive_seq=258 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005374 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.39 cputime=80.580 memavail=1266368 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2148.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5193 bytes_read=7291 bytes_retransmit=9 bytes_invalid=0 send_seq=259 receive_seq=259 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005398 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.39 cputime=80.623 memavail=1266368 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2149.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5199 bytes_read=7397 bytes_retransmit=9 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005421 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.39 cputime=80.649 memavail=1267936 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.4 pwm=0.000
Stats 2150.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5205 bytes_read=7518 bytes_retransmit=9 bytes_invalid=0 send_seq=261 receive_seq=261 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005389 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.39 cputime=80.668 memavail=1267936 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.7 pwm=0.000
Stats 2151.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5211 bytes_read=7652 bytes_retransmit=9 bytes_invalid=0 send_seq=262 receive_seq=262 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005395 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.39 cputime=80.704 memavail=1268444 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 2152.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5217 bytes_read=7758 bytes_retransmit=9 bytes_invalid=0 send_seq=263 receive_seq=263 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005406 heater_bed: target=0 temp=22.6 pwm=0.000  sysload=0.44 cputime=80.744 memavail=1268444 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Stats 2153.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5223 bytes_read=7879 bytes_retransmit=9 bytes_invalid=0 send_seq=264 receive_seq=264 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005419 heater_bed: target=0 temp=22.6 pwm=0.000  sysload=0.44 cputime=80.770 memavail=1267948 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2154.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5229 bytes_read=8000 bytes_retransmit=9 bytes_invalid=0 send_seq=265 receive_seq=265 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005405 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.44 cputime=80.789 memavail=1267948 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2155.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5235 bytes_read=8106 bytes_retransmit=9 bytes_invalid=0 send_seq=266 receive_seq=266 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005429 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.44 cputime=80.825 memavail=1267724 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2156.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5241 bytes_read=8240 bytes_retransmit=9 bytes_invalid=0 send_seq=267 receive_seq=267 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005427 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.44 cputime=80.869 memavail=1267724 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2157.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5247 bytes_read=8361 bytes_retransmit=9 bytes_invalid=0 send_seq=268 receive_seq=268 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005426 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.49 cputime=80.895 memavail=1267472 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2158.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5259 bytes_read=8483 bytes_retransmit=9 bytes_invalid=0 send_seq=270 receive_seq=270 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005402 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.49 cputime=80.914 memavail=1267472 print_time=0.014 buffer_time=0.000 print_stall=0 extruder: target=0 temp=23.6 pwm=0.000
Stats 2159.7: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000010 mcu_task_stddev=0.000007 bytes_write=5293 bytes_read=8609 bytes_retransmit=9 bytes_invalid=0 send_seq=272 receive_seq=272 retransmit_seq=2 srtt=0.004 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005400 heater_bed: target=0 temp=22.7 pwm=0.000  sysload=0.49 cputime=80.952 memavail=1268028 print_time=28.792 buffer_time=0.318 print_stall=0 extruder: target=0 temp=23.5 pwm=0.000
Attempting MCU 'mcu' reset command
webhooks client 281473306586464: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:55:33 2023 (1697522133.7 2161.1)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473300321808: New connection
webhooks client 281473300321808: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281473300321808: Disconnected
Restarting printer
Start printer at Mon Oct 16 22:55:52 2023 (1697522152.0 2179.5)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473230086784: New connection
webhooks client 281473230086784: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Starting Klippy...
Args: ['/home/quadra/klipper/klippy/klippy.py', '/home/quadra/printer_data/config/printer.cfg', '-I', '/home/quadra/printer_data/comms/klippy.serial', '-l', '/home/quadra/printer_data/logs/klippy.log', '-a', '/home/quadra/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-299-gb1f597c5'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Oct 16 23:16:48 2023 (1697523408.2 20.0)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472852346864: New connection
webhooks client 281472852346864: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281472852346864: Disconnected
Restarting printer
Start printer at Mon Oct 16 23:18:22 2023 (1697523502.3 100.1)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472852812224: New connection
webhooks client 281472852812224: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281472852812224: Disconnected
Restarting printer
Start printer at Mon Oct 16 23:21:52 2023 (1697523712.1 309.9)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 281472855360512: New connection
webhooks client 281472855360512: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Loaded MCU 'mcu' 105 commands (v0.11.0-148-g52f4e20c / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Enabling TMC virtual enable for 'stepper_x'
Enabling TMC virtual enable for 'stepper_y'
Enabling TMC virtual enable for 'stepper_z'
Enabling TMC virtual enable for 'extruder'
Starting heater checks for heater_bed
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (5.0, 25.0)     | (35.0, 5.0)
  1   | (47.5, 25.0)    | (77.5, 5.0)
  2   | (90.0, 25.0)    | (120.0, 5.0)
  3   | (132.5, 25.0)   | (162.5, 5.0)
  4   | (175.0, 25.0)   | (205.0, 5.0)
  5   | (175.0, 72.5)   | (205.0, 52.5)
  6   | (132.5, 72.5)   | (162.5, 52.5)
  7   | (90.0, 72.5)    | (120.0, 52.5)
  8   | (47.5, 72.5)    | (77.5, 52.5)
  9   | (5.0, 72.5)     | (35.0, 52.5)
  10  | (5.0, 120.0)    | (35.0, 100.0)
  11  | (47.5, 120.0)   | (77.5, 100.0)
  12  | (90.0, 120.0)   | (120.0, 100.0)
  13  | (132.5, 120.0)  | (162.5, 100.0)
  14  | (175.0, 120.0)  | (205.0, 100.0)
  15  | (175.0, 167.5)  | (205.0, 147.5)
  16  | (132.5, 167.5)  | (162.5, 147.5)
  17  | (90.0, 167.5)   | (120.0, 147.5)
  18  | (47.5, 167.5)   | (77.5, 147.5)
  19  | (5.0, 167.5)    | (35.0, 147.5)
  20  | (5.0, 215.0)    | (35.0, 195.0)
  21  | (47.5, 215.0)   | (77.5, 195.0)
  22  | (90.0, 215.0)   | (120.0, 195.0)
  23  | (132.5, 215.0)  | (162.5, 195.0)
  24  | (175.0, 215.0)  | (205.0, 195.0)
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 281472855360512
webhooks: registering remote method 'reboot_machine' for connection id: 281472855360512
webhooks: registering remote method 'pause_job_queue' for connection id: 281472855360512
webhooks: registering remote method 'start_job_queue' for connection id: 281472855360512
Stats 492.8: gcodein=0  mcu: mcu_awake=0.001 mcu_task_avg=0.000012 mcu_task_stddev=0.000015 bytes_write=6942 bytes_read=27162 bytes_retransmit=9 bytes_invalid=0 send_seq=495 receive_seq=495 retransmit_seq=2 srtt=0.003 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72005346  heater_bed: target=0 temp=22.6 pwm=0.000 sysload=0.10 cputime=16.185 memavail=1203228 print_time=1761.739 buffer_time=0.263 print_stall=0 extruder: target=0 temp=23.4 pwm=0.000
Attempting MCU 'mcu' reset command
webhooks client 281472855360512: Disconnected
Restarting printer
Start printer at Mon Oct 16 23:24:56 2023 (1697523896.6 494.3)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472861616880: New connection
webhooks client 281472861616880: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281472861616880: Disconnected
Restarting printer
Start printer at Mon Oct 16 23:25:10 2023 (1697523910.7 508.4)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472873162880: New connection
webhooks client 281472873162880: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
webhooks client 281472873162880: Disconnected
Restarting printer
Start printer at Mon Oct 16 23:35:31 2023 (1697524532.0 1129.7)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472855362864: New connection
webhooks client 281472855362864: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Unable to issue reset command on MCU 'mcu'
webhooks client 281472855362864: Disconnected
Restarting printer
Start printer at Mon Oct 16 23:36:47 2023 (1697524607.2 1204.9)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[gcode_macro update_git]
gcode = RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281472853050896: New connection
webhooks client 281472853050896: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
Starting Klippy...
Args: ['/home/quadra/klipper/klippy/klippy.py', '/home/quadra/printer_data/config/printer.cfg', '-I', '/home/quadra/printer_data/comms/klippy.serial', '-l', '/home/quadra/printer_data/logs/klippy.log', '-a', '/home/quadra/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-299-gb1f597c5'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Oct 16 23:54:40 2023 (1697525680.3 20.0)
===== Config file =====
[force_move]
enable_force_move = true

[virtual_sdcard]
path = /home/quadra/printer_data/gcodes

[exclude_object]

[pause_resume]

[display_status]

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro _globals]
variable_filament_sensor_enabled = 1
variable_beeping_enabled = 1
variable_bed_temp_over = 10
variable_kamp_enable = 1
variable_pre_purge_prime_length = 1.40
gcode = 

[gcode_macro CONDITIONAL_BEEP]
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}
	
	{% if BEEPING_ENABLED == 1 %}
	BEEP I={i} DUR={dur} FREQ={freq}
	{% endif %}

[gcode_macro ADJUST_FILAMENT_SENSOR_STATUS]
gcode = 
	
	{% set NEWSTATUS = params.ENABLE|default(-1)|int %}
	
	{% set FILAMENT_SENSOR_ENABLED=printer["gcode_macro _globals"].filament_sensor_enabled|default(-1)|int %}
	
	{% if FILAMENT_SENSOR_ENABLED == 1 and NEWSTATUS != -1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={NEWSTATUS}
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	
	{% set s = params.S|float %}
	
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
	{% endif %}

[gcode_macro PURGE_LINE]
gcode = 
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	
	{% set extrudeAmount = 26.6 %}
	{% set movementLength = 100.0 %}
	{% set movementSpeed = 15 * 60 %}
	{% set xStart = 5 %}
	{% set yStart = 0.5 %}
	
	
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	G92 E0.0
	G90
	G0 X{xStart} Y{yStart} F{maxVelocityAdjusted}
	G1 Z0.4 F500.0
	M83
	G1 E{PRE_PURGE_PRIME_LENGTH} F500
	G1 X{xStart + movementLength} E{extrudeAmount} F{movementSpeed}
	
	G92 E0.0
	M82
	G1 Z5.0

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	{% set bedtemp = params.BED|int %}
	{% set hotendtemp = params.HOTEND|int %}
	{% set chambertemp = params.CHAMBER|default(0)|int %}
	
	
	{% set bedtempSlicer = bedtemp %}
	{% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set maxVelocityAdjusted =  (0.90 * maxVelocity * 60)|int %}
	{% set kampEnabled=printer["gcode_macro _globals"].kamp_enable|default(0)|int %}
	
	{% if printer.configfile.settings.safe_z_home %}
	{% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
	{% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
	{% endif %}
	
	{% set bedtempAlmost = ((bedtemp - 2, 0, printer.heater_bed.temperature|int)|max, bedtemp)|max %}
	{% set hotendtempStepOne = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
	{% set hotendtempStepTwo = ((hotendtemp, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}
	
	
	{% if bedtempAlmost > bedtemp %}
	{% if (bedtempAlmost - bedtempOver) <= bedtemp %}
	{% set bedtemp = bedtempAlmost %}
	{% endif %}
	{% endif %}
	
	G90
	M140 S{bedtempAlmost}
	M104 S{hotendtempStepOne}
	G28 X Y
	{% if printer.configfile.settings.safe_z_home %}
	G1 X{startX} Y{startY} F{maxVelocityAdjusted}
	{% endif %}
	
	M190 S{bedtempAlmost}
	{% if kampEnabled == 0 %}
	M104 S{hotendtempStepTwo}
	{% endif %}
	M190 S{bedtemp}
	M140 S{bedtempSlicer}
	
	{% if kampEnabled == 0 %}
	BED_MESH_PROFILE LOAD=default
	M104 S{hotendtemp}
	G28 Z
	{% else %}
	G28 Z
	BED_MESH_CALIBRATE
	M104 S{hotendtemp}
	{% endif %}
	
	G1 X5 Y0 F{maxVelocityAdjusted}
	M109 S{hotendtemp}
	
	G1 Z20 F3000

[gcode_macro PRINT_END]
gcode = 
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	CONDITIONAL_BEEP I=2 DUR=30 FREQ=8500
	{% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(1.40)|float %}
	
	M400
	G92 E0
	G1 E-{PRE_PURGE_PRIME_LENGTH} F400
	G91
	
	
	{% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
	{% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
	{% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
	{% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}
	
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% set lift_height = 25.0 %}
	{% if printer.toolhead.position.z < (max_z - lift_height) %}
	{% set z_safe = lift_height %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 Z{z_safe} F{zVelocityAdjusted}
	G0 X{x_safe} Y{y_safe} F{maxVelocityAdjusted}
	TURN_OFF_HEATERS
	M107
	G90
	G0 X60 Y{max_y} F3600

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E30 F300
	G1 E15 F150
	M82

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E10 F300
	G1 E-40 F1800
	M82

[gcode_macro M600]
gcode = 
	CONDITIONAL_BEEP i=1 dur=300
	CONDITIONAL_BEEP i=1 dur=100
	CONDITIONAL_BEEP i=1 dur=100
	PAUSE

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing = BASE_RESUME
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}

[gcode_macro _CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro BEEP]
description = BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode = 
	
	{% set i = params.I|default(1)|int %}
	{% set dur = params.DUR|default(100)|int %}
	{% set freq = params.FREQ|default(2000)|int %}
	
	{% for iteration in range(i|int) %}
	SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
	G4 P{dur}
	SET_PIN PIN=beeper VALUE=0
	G4 P{dur}
	{% endfor %}

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode = 
	
	{% set my_current = params.CURRENT|default(0.20)|float %}
	
	{% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
	{% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
	{% set x_max = printer.toolhead.axis_maximum.x %}
	{% set y_max = printer.toolhead.axis_maximum.y %}
	{% set z_max = printer.toolhead.axis_maximum.z %}
	{% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
	{% set fast_move = printer.configfile.settings["printer"].max_velocity %}
	M117 {printer.homed_axes}
	{% if printer.homed_axes != 'xyz' %}
	G28
	{% endif %}
	G90
	G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 }
	
	G0 Z{z_max -5} F{fast_move_z * 60 }
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current}
	{% endif %}
	
	BEEP I=1
	G4 P200
	
	SET_KINEMATIC_POSITION Z={z_max - 25}
	
	G1 Z{z_max} F{6 * 60}
	BEEP I=2
	G4 P10000
	G1 Z{z_max -6} F{6 * 60}
	BEEP I=3
	G4 P200
	
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	
	{% if printer.configfile.settings["stepper_z1"] %}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold}
	{% endif %}
	
	G1 Z{z_max -30} F{6 * 60}
	
	G4 P200
	G28 Z

[gcode_macro G34]
gcode = 
	MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type = command
enable = {not printer.idle_timeout.state == "Printing"}
name = G34 Gantry Level
gcode = 
	G34

[gcode_macro PID_TEST_BED]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(70)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z40 F6000
	PID_CALIBRATE HEATER=heater_bed TARGET={TARGETTEMP}

[gcode_macro PID_TEST_HOTEND]
gcode = 
	
	{% set TARGETTEMP = params.TEMP|default(245)|int %}
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G28
	G90
	G1 X{max_x/2} Y{max_y/2} Z10 F6000
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET={TARGETTEMP}
	M107

[gcode_macro PID_TEST_ALL]
gcode = 
	PID_TEST_BED
	PID_TEST_HOTEND
	SAVE_CONFIG

[gcode_macro DO_PROBE_CALIBRATE]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	PROBE_CALIBRATE

[gcode_macro DO_CREATE_MESH]
gcode = 
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM=180
	G28
	_BED_MESH_CALIBRATE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 1
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[mcu]
serial = /dev/serial/by-path/platform-5101400.usb-usb-0:1:1.0-port0
restart_method = command

[printer]
kinematics = cartesian
max_velocity = 200
max_accel = 3000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 8.0

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_endstop = 5
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_x]
uart_pin = PC1
run_current = 0.860
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA5

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 128
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_endstop = 0
position_max = 228
homing_speed = 40
homing_retract_dist = 0

[tmc2209 stepper_y]
uart_pin = PC0
run_current = 0.900
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
driver_sgthrs = 81
diag_pin = PA6

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 128
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_min = -4
position_max = 235
homing_speed = 5

[tmc2209 stepper_z]
uart_pin = PA15
run_current = 1.000
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3
diag_pin = PA7

[extruder]
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 128
rotation_distance = 4.63
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
pressure_advance = 0.055
min_temp = -50
max_temp = 300
max_extrude_only_distance = 150.0
control = pid
pid_kp = 20.592
pid_ki = 1.460
pid_kd = 72.588

[tmc2209 extruder]
uart_pin = PC14
run_current = 0.550
stealthchop_threshold = 0
interpolate = False
sense_resistor = 0.150
uart_address = 3

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 110
control = pid
pid_kp = 67.607
pid_ki = 1.314
pid_kd = 869.592

[probe]
pin = PB1
x_offset = 30
y_offset = -20
samples = 3
samples_result = median
samples_tolerance = 0.01
samples_tolerance_retries = 5
z_offset = 1.465

[safe_z_home]
home_xy_position = 90, 135.5
speed = 100.0
z_hop = 10
z_hop_speed = 15

[bed_mesh]
speed = 175
mesh_min = 35, 5
mesh_max = 205, 195
probe_count = 5,5
algorithm = bicubic
fade_start = 1
fade_end = 10
fade_target = 0

[fan]
pin = PA0

[display]
lcd_type = st7920
cs_pin = PB12
sclk_pin = PB13
sid_pin = PB15
encoder_pins = ^PB14, ^PB10
click_pin = ^!PB2

[bed_screws]
screw1_name = front left
screw1 = 26.5, 31
screw2_name = front right
screw2 = 196.75, 31
screw3_name = back right
screw3 = 196.75, 201
screw4_name = back left
screw4 = 26.5, 201

[screws_tilt_adjust]
screw1_name = center
screw1 = 90.50, 137.5
screw2_name = front left
screw2 = 6, 53
screw3_name = front right
screw3 = 175, 53
screw4_name = back right
screw4 = 175, 222.5
screw5_name = back left
screw5 = 6, 222.5
horizontal_move_z = 10
screw_thread = CCW-M4

[output_pin beeper]
pin = PC6
value = 0
shutdown_value = 0
pwm = True
cycle_time = 0.0005

[filament_switch_sensor filament_sensor]
switch_pin = PA4
pause_on_runout = True
insert_gcode = 
	M117 Insert Detected
	{ action_respond_info("Insert Detected") }
runout_gcode = 
	M117 Runout Detected
	{ action_respond_info("Runout Detected") }
	CONDITIONAL_BEEP i=3 dur=300 freq=400

[gcode_macro update_git]
gcode = RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/quadra/klipper-backup/script.sh
timeout = 90.0
verbose = True

[bed_mesh default]
version = 1
points = 
	-0.051250, -0.046719, -0.001875, -0.017500, -0.157969
	0.044687, 0.054375, 0.052344, 0.025625, -0.064688
	0.042500, 0.031406, 0.005312, 0.017187, -0.051250
	-0.046719, -0.010313, -0.008906, -0.003594, -0.064531
	-0.039063, 0.034375, 0.045625, 0.032500, -0.046875
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 35.0
max_x = 205.0
min_y = 5.0
max_y = 195.0

[input_shaper]
shaper_type_y = 2hump_ei
shaper_freq_y = 63.0
shaper_type_x = mzv
shaper_freq_x = 54.6
=======================
Extruder max_extrude_ratio=0.266081
Config error
Traceback (most recent call last):
  File "/home/quadra/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/quadra/klipper/klippy/klippy.py", line 145, in _read_config
    pconfig.check_unused_options(config)
  File "/home/quadra/klipper/klippy/configfile.py", line 299, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'gcode_shell_command update_git_script' is not a valid config section
webhooks client 281473275934752: New connection
webhooks client 281473275934752: Client info {'program': 'Moonraker', 'version': 'v0.8.0-186-g2641fc5'}
